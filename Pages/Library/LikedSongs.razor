@page "/library"


@using Caerostris.Shared.Data.TrackGrid
@using Caerostris.Shared.Data.TrackGrid.Columns
@using Caerostris.Shared.Data.TrackGrid.Extensions
@using Caerostris.Shared.Data.TrackGrid.ViewModel


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


@if (tracks is null)
{
    <CenteredLoadingIndicator @ref=loadingIndicator LoadingWhat=@L["LoadingTracks"] ShowProgress />
}
else
{
    <div class="d-flex flex-column justify-content-start align-items-stretch p-4 h-100">

        <div class="mx-3 mb-5 library-controls">

            <BoundInlineCheckbox Label=@L["ShowFilterRow"] @bind-Checked=@showFilterRow />
            <BoundInlineCheckbox Label=@L["ShowExplicitColumn"] @bind-Checked=@showExplicitColumn />
            <BoundInlineCheckbox Label=@L["ShowPopularityColumn"] @bind-Checked=@showPopularityColumn />

        </div>

        <TrackGrid Tracks=@tracks
                   Search
                   Filter=@showFilterRow
                   Fill>

            <TitleColumn />
            <ExplicitColumn IsVisible=@showExplicitColumn />
            <ArtistsColumn />
            <AlbumTitleColumn />
            <AddedAtColumn />
            <DurationColumn />
            <PopularityColumn IsVisible=@showPopularityColumn />

        </TrackGrid>

    </div>
}


@code
{
    private CenteredLoadingIndicator loadingIndicator = default!;

    private ICollection<Track>? tracks;

    private bool
        showFilterRow = true,
        showExplicitColumn = true,
        showPopularityColumn = false;


    protected override async Task OnInitializedAsync()
    {
        if (await Spotify.IsAuthGranted())
            tracks = (await Spotify.GetSavedTracks()).Select(t => t.AsTrack()).ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Spotify.LibraryLoadingProgress += loadingIndicator.Update;
        }
    }
}
