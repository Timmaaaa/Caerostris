@page "/library"


@using Caerostris.Services.Spotify.Web.ViewModels
@using DevExpress.Blazor


@inject SpotifyService Spotify



@if (tracks is null)
{
    <HeightMeasurementProvider OnMeasurementTaken=OnHeightMeasured Fluid>

        <CenteredLoadingIndicator @ref=loadingIndicator LoadingWhat="tracks" ShowProgress/>

    </HeightMeasurementProvider>
}
else
{
    <div class="d-flex flex-column justify-content-between align-items-stretch py-4 h-100">
        <div class="px-3 library-controls">
            Show:
            <BoundInlineCheckbox Label="filter row" @bind-Checked=@showFilterRow />
            <BoundInlineCheckbox Label="explicit" @bind-Checked=@showExplicitColumn />
            <BoundInlineCheckbox Label="popularity" @bind-Checked=@showPopularityColumn />
            <BoundInlineCheckbox Label="type" @bind-Checked=@showTypeColumn />
        </div>
        <div>
            <DxDataGrid CssClass="datagrid"
                        DataRowCssClass="datagrid-row"
                        DataNavigationMode=@DataGridNavigationMode.VirtualScrolling
                        VerticalScrollBarMode=@ScrollBarMode.Visible
                        VerticalScrollableHeight=@datagridHeight
                        ShowFilterRow=@showFilterRow
                        PageSize=50
                        SelectionMode=@DataGridSelectionMode.None
                        HtmlRowDecoration=@OnHtmlRowDecoration
                        LayoutChanged=@OnLayoutChanged
                        Data=@tracks>

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.Name) Caption="Title" Width="150px">
                    <DisplayTemplate>
                        <a href="javascript:void(0);"
                            @onclick=@(async () => await StartLibraryPlaybackAt((context as FlatSavedTrack).SavedTrack.Track.Uri))>
                            @((context as FlatSavedTrack).SavedTrack.Track.Name)
                        </a>
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.Explicit) Caption="Explicit" Width="30px" Visible=@showExplicitColumn>
                    <DisplayTemplate>
                        @if ((context as FlatSavedTrack).Explicit)
                        {
                            <span class="explicit-mark">EXPLICIT</span>
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.Artists) Caption="Artist" Width="150px" />

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.Album) Caption="Album" Width="100px" />

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.AddedAt) Caption="Added" Width="100px">
                    <DisplayTemplate>
                        @((context as FlatSavedTrack).SavedTrack.HumanReadableAddedAt())
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.DurationMS) Caption="Length" Width="50px">
                    <DisplayTemplate>
                        @((context as FlatSavedTrack).SavedTrack.Track.HumanReadableDuration())
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.Popularity) Caption="Popularity" Width="50px" Visible=@showPopularityColumn />

                <DxDataGridColumn Field=@nameof(FlatSavedTrack.Type) Caption="Type" Width="30px" Visible=@showTypeColumn />

            </DxDataGrid>
        </div>
    </div>
}


@code
{
    private CenteredLoadingIndicator loadingIndicator;

    private IQueryable<FlatSavedTrack>? tracks;

    private int datagridHeight = 550;

    private List<string> visibleURIs = new List<string>();

    private bool
        showFilterRow = true,
        showExplicitColumn = true,
        showTypeColumn = false,
        showPopularityColumn = false;


    protected async override Task OnInitializedAsync()
    {
        if (await Spotify.AuthGranted())
            tracks = (await Spotify.GetFlatSavedTracks()).AsQueryable();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Spotify.LibraryLoadingProgress += loadingIndicator.Update;
        }
    }

    private void OnHeightMeasured(int height)
    {
        /// If an explicit height is not passed to the DxDataGrid, it will default to a ~200px scrolling area instead of filling its container
        datagridHeight = Math.Max(height - 250, 100);
    }

    private void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<FlatSavedTrack> e)
    {
        if (e.VisibleIndex == 0)
            visibleURIs.Clear(); // TODO: insert if scrolling upwards

        visibleURIs.Add(e.DataItem.SavedTrack.Track.Uri);
    }

    private void OnLayoutChanged(IDataGridLayout _) =>
        visibleURIs.Clear();

    private async Task StartLibraryPlaybackAt(string URI)
    {
        if (!visibleURIs.Contains(URI))
            await Spotify.PlayTrack(null, URI);
        else
            await Spotify.PlayTracks(visibleURIs.GetRange(visibleURIs.IndexOf(URI), visibleURIs.Count - visibleURIs.IndexOf(URI)));
    }
}
