@page "/library"


@using Caerostris.Services.Spotify.Web.ViewModels
@using DevExpress.Blazor


@inject SpotifyService Spotify



@if (tracks is null)
{
    <HeightMeasurementProvider OnMeasurementTaken=OnHeightMeasured Fluid>

        <CenteredLoadingIndicator @ref=loadingIndicator LoadingWhat="tracks" ShowProgress/>

    </HeightMeasurementProvider>
}
else
{
    <div class="d-flex flex-column justify-content-between align-items-stretch py-4 h-100">
        <div class="px-3 library-controls">
            Show:
            <BoundInlineCheckbox Label="filter row" @bind-Checked=@showFilterRow />
            <BoundInlineCheckbox Label="explicit" @bind-Checked=@showExplicitColumn />
            <BoundInlineCheckbox Label="popularity" @bind-Checked=@showPopularityColumn />
            <BoundInlineCheckbox Label="type" @bind-Checked=@showTypeColumn />
        </div>
        <div>
            <DxDataGrid CssClass="datagrid"
                        DataRowCssClass="datagrid-row"
                        DataNavigationMode=@DataGridNavigationMode.VirtualScrolling
                        VerticalScrollBarMode=@ScrollBarMode.Visible
                        VerticalScrollableHeight=@datagridHeight
                        ShowFilterRow=@showFilterRow
                        PageSize=50
                        SelectionMode=@DataGridSelectionMode.None
                        HtmlRowDecoration=@OnHtmlRowDecoration
                        LayoutChanged=@OnLayoutChanged
                        Data=@tracks>

                <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Name)}") Caption="Title" Width="150px">
                    <DisplayTemplate>
                        <ActionText Text=@((context as SavedTrack).Track.Name)
                                    OnClick=@(async () => await StartLibraryPlaybackAt((context as SavedTrack).Track.Uri)) />
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Explicit)}") Caption="Explicit" Width="30px" Visible=@showExplicitColumn>
                    <DisplayTemplate>
                        @if ((context as SavedTrack).Track.Explicit)
                        {
                            <span class="explicit-mark">EXPLICIT</span>
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Caption="Artist" Width="150px" AllowSort=@DefaultBoolean.False>
                    <DisplayTemplate>
                        @((MarkupString)(context as SavedTrack).Track.Artists.GetArtists(link: true, localUrl: Spotify.ExploreArtistUrl))
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Album)}.{nameof(SimpleAlbum.Name)}") Caption="Album" Width="100px">
                    <DisplayTemplate>
                        @((MarkupString)(context as SavedTrack).Track.Album.GetName(link: true, localUrl: Spotify.ExploreAlbumUrl))
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(SavedTrack.AddedAt) Caption="Added" Width="100px">
                    <DisplayTemplate>
                        @((context as SavedTrack).HumanReadableAddedAt())
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.DurationMs)}") Caption="Length" Width="50px">
                    <DisplayTemplate>
                        @((context as SavedTrack).Track.HumanReadableDuration())
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Popularity)}") Caption="Popularity" Width="50px" Visible=@showPopularityColumn />

                <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Type)}") Caption="Type" Width="30px" Visible=@showTypeColumn /> <!-- TODO: ennek semmi értelme -->

            </DxDataGrid>
        </div>
    </div>
}


@code
{
    private CenteredLoadingIndicator loadingIndicator;

    private IQueryable<SavedTrack>? tracks;

    private int datagridHeight = 550;

    private List<string> visibleUris = new List<string>();

    private bool
        showFilterRow = true,
        showExplicitColumn = true,
        showTypeColumn = false,
        showPopularityColumn = false;


    protected async override Task OnInitializedAsync()
    {
        if (await Spotify.AuthGranted())
            tracks = (await Spotify.GetSavedTracks()).AsQueryable();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Spotify.LibraryLoadingProgress += loadingIndicator.Update;
        }
    }

    private void OnHeightMeasured(int height)
    {
        /// If an explicit height is not passed to the DxDataGrid, it will default to a ~200px scrolling area instead of filling its container
        datagridHeight = Math.Max(height - 250, 100);
    }

    private void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<SavedTrack> e)
    {
        if (e.VisibleIndex == 0)
            visibleUris.Clear(); // TODO: insert if scrolling upwards

        visibleUris.Add(e.DataItem.Track.Uri);
    }

    private void OnLayoutChanged(IDataGridLayout _) =>
        visibleUris.Clear();

    private async Task StartLibraryPlaybackAt(string Uri)
    {
        if (!visibleUris.Contains(Uri))
            await Spotify.PlayTrack(null, Uri);
        else
            await Spotify.PlayTracks(visibleUris.GetRange(visibleUris.IndexOf(Uri), visibleUris.Count - visibleUris.IndexOf(Uri)));
    }
}
