@page "/context"


@using Caerostris.Shared.Context
@using Caerostris.Services.Spotify.Web.ViewModels


@namespace Caerostris.Pages.Context


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


    @if (loading)
    {
        <CenteredLoadingIndicator LoadingWhat=@L["LoadingContext"] />
    }
    else
    {
        @if (artistContext is not null)
        {
            <ArtistPage ArtistProfile=@artistContext />
        }
        else if (albumContext is not null)
        {
            <AlbumPage CompleteAlbum=@albumContext />
        }
        else if (playlistContext is not null)
        {
            <PlaylistPage CompletePlaylist=@playlistContext />
        }
        else
        {
            <CenteredInfo Text=@L["CantDisplayContext"] />
        }
    }


@code
{
    private ArtistProfile? artistContext;
    private CompleteAlbum? albumContext;
    private CompletePlaylist? playlistContext;
    private bool loading = true;


    protected override async Task OnInitializedAsync()
    {
        Spotify.Context.ContextChanged += OnContextChanged;
        await OnContextChanged(await Spotify.Playback.GetPlayback());
    }

    private async Task OnContextChanged(CurrentlyPlayingContext? playback)
    {
        await InvokeAsync(async () =>
        {
            if (!string.IsNullOrEmpty(playback?.Context?.Uri))
            {
                ResetContext();
                loading = true;
                StateHasChanged();

                var id = WebApiModelExtensions.IdFromUri(playback.Context.Uri);
                switch (playback.Context.Type)
                {
                    case "artist":      artistContext = await Spotify.Context.GetArtist(id);        break;
                    case "album":       albumContext = await Spotify.Context.GetAlbum(id);          break;
                    case "playlist":    playlistContext = await Spotify.Context.GetPlaylist(id);    break;
                    default: break;
                };
            }

            loading = false;
            StateHasChanged();
        });
    }

    private void ResetContext()
    {
        artistContext = null;
        albumContext = null;
        playlistContext = null;
    }

    public void Dispose()
    {
        Spotify.Context.ContextChanged -= OnContextChanged;
    }
}
