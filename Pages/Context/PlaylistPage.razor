@inject SpotifyService Spotify


<HeightMeasurementProvider @ref=contentHeight Fluid>

    <div class="d-flex flex-column justify-content-start h-100 p-4">

        <HeightMeasurementProvider @ref=contentHeaderHeight OnMeasurementTaken=measurement.OnMeasurementTaken>

            <ContextPageHeading Type=@CompletePlaylist.Playlist.Type.ToUpper()
                                Title=@CompletePlaylist.Playlist.Name
                                By=@CompletePlaylist.Playlist.Owner.DisplayName
                                ImageUri=@CompletePlaylist.Playlist.Images.OrderBy(i => i.Height).LastOrDefault()?.Url>

                <p>
                    @(CompletePlaylist.Playlist.Public ? "Public" : "Private")
                    • @CompletePlaylist.Playlist.Followers.Total.ThousandsSeparator() follower@((CompletePlaylist.Playlist.Followers.Total == 1) ? string.Empty : "s")
                    • @CompletePlaylist.Tracks.Count() songs, @CompletePlaylist.HumanReadableTotalLength()
                </p>

                @if (!string.IsNullOrEmpty(CompletePlaylist.Playlist.Description))
                {
                    <p class="pt-2">@((MarkupString)CompletePlaylist.Playlist.Description)</p>
                }

                <PrimaryIconButton Icon="play_arrow" OnClick=@(() => Spotify.PlayTrack(contextUri: CompletePlaylist.Playlist.Uri, trackUri: null)) />

            </ContextPageHeading>

        </HeightMeasurementProvider>

        @if (measurement.Taken)
        {
            <DxDataGrid CssClass="datagrid"
                        DataRowCssClass="datagrid-row"
                        DataNavigationMode=@DataGridNavigationMode.VirtualScrolling
                        VerticalScrollableHeight=@measurement.Output
                        ShowFilterRow=false
                        SelectionMode=@DataGridSelectionMode.None
                        AllowColumnDragDrop=false
                        AllowSort=true
                        Data=@CompletePlaylist.Tracks>

                <DxDataGridColumn Field=@($"{nameof(PlaylistTrack.Track)}.{nameof(FullTrack.Name)}") Caption="Title" Width="150px">
                    <DisplayTemplate>
                        <ActionText Text=@((context as PlaylistTrack).Track.Name)
                                    OnClick=@(() => Spotify.PlayTrack(contextUri: CompletePlaylist.Playlist.Uri, trackUri: (context as PlaylistTrack).Track.OriginalUri())) />
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Caption="Artists" Width="150px" AllowSort=DevExpress.Blazor.DefaultBoolean.False>
                    <DisplayTemplate>
                        @((MarkupString)((context as PlaylistTrack).Track.Artists.GetArtists(link: true, localUrl: Spotify.ExploreArtistUrl)))
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(PlaylistTrack.AddedAt) Caption="Added" Width="50px">
                    <DisplayTemplate>
                        @((context as PlaylistTrack).HumanReadableAddedAt())
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@($"{nameof(PlaylistTrack.Track)}.{nameof(FullTrack.DurationMs)}") Caption="Length" Width="50px">
                    <DisplayTemplate>
                        @((context as PlaylistTrack).Track.HumanReadableDuration())
                    </DisplayTemplate>
                </DxDataGridColumn>

            </DxDataGrid>
        }

    </div>

</HeightMeasurementProvider>


@code
{
    [Parameter]
    public CompletePlaylist CompletePlaylist { get; set; }

    private HeightMeasurementProvider contentHeight, contentHeaderHeight;
    private HeightMeasurementProvider.Measurement measurement = new HeightMeasurementProvider.Measurement();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            measurement.StateHasChanged = StateHasChanged;
            measurement.Calculate = (_) => Math.Max(contentHeight.Height - contentHeaderHeight.Height - 50, 100);
        }
    }
}
