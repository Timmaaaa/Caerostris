@inject SpotifyService Spotify


<HeightMeasurementProvider @ref=contentHeight Fluid>

    <div class="d-flex flex-column justify-content-start h-100 p-4">

        <HeightMeasurementProvider @ref=contentHeaderHeight OnMeasurementTaken=measurement.OnMeasurementTaken>

            <ContextPageHeading Type=@(CompleteAlbum.Album.AlbumType.ToUpper())
                                Title=@(CompleteAlbum.Album.Name)
                                By=@(CompleteAlbum.Album.Artists.GetArtists(link: true, localUrl: Spotify.ExploreArtistUrl))
                                ImageUri=@CompleteAlbum.Album.Images.OrderBy(i => i.Height).LastOrDefault()?.Url>

                <p>@CompleteAlbum.Album.ReleaseDate • @CompleteAlbum.Tracks.Count() songs, @CompleteAlbum.HumanReadableTotalLength()</p>

                <PrimaryIconButton Icon="play_arrow" OnClick=@(() => Spotify.PlayTrack(contextUri: CompleteAlbum.Album.Uri, trackUri: null))/>

            </ContextPageHeading>

        </HeightMeasurementProvider>

        @if (measurement.Taken)
        {
            <DxDataGrid CssClass="datagrid"
                        DataRowCssClass="datagrid-row"
                        DataNavigationMode=@DataGridNavigationMode.VirtualScrolling
                        VerticalScrollableHeight=@measurement.Output
                        ShowFilterRow=false
                        SelectionMode=@DataGridSelectionMode.None
                        AllowColumnDragDrop=false
                        AllowSort=true
                        Data=@CompleteAlbum.Tracks>

                <DxDataGridColumn Field=@nameof(SimpleTrack.Name) Caption="Title" Width="150px">
                    <DisplayTemplate>
                        <ActionText Text=@((context as SimpleTrack).Name)
                                    OnClick=@(() => Spotify.PlayTrack(contextUri: CompleteAlbum.Album.Uri, trackUri: (context as SimpleTrack).Uri)) />
                        @if ((context as SimpleTrack).Artists.Count() > CompleteAlbum.Album.Artists.Count())
                        {
                            <span class="collab-with pl-1">— with</span>
                            @((MarkupString)((context as SimpleTrack).Artists.Where(a => CompleteAlbum.Album.Artists.FirstOrDefault(aa => aa.Uri.Equals(a.Uri)) is null).GetArtists(link: true, localUrl: Spotify.ExploreArtistUrl)))
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>

                <DxDataGridColumn Field=@nameof(SimpleTrack.DurationMs) Caption="Length" Width="50px">
                    <DisplayTemplate>
                        @((context as SimpleTrack).HumanReadableDuration())
                    </DisplayTemplate>
                </DxDataGridColumn>

            </DxDataGrid>
        }

    </div>

</HeightMeasurementProvider>


@code
{
    [Parameter]
    public CompleteAlbum CompleteAlbum { get; set; }

    private HeightMeasurementProvider contentHeight, contentHeaderHeight;
    private HeightMeasurementProvider.Measurement measurement = new HeightMeasurementProvider.Measurement();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            measurement.StateHasChanged = StateHasChanged;
            measurement.Calculate = (_) => Math.Max(contentHeight.Height - contentHeaderHeight.Height - 50, 100);
        }
    }
}