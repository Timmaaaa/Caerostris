@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


<div class="d-flex flex-column justify-content-start overflow-auto h-100 p-4">

    <ContextPageHeading Type=@L["Artist"]
                        Title=@ArtistProfile.Artist.GetName(link: true)
                        ImageUri=@ArtistProfile.Artist.Images.OrderBy(i => i.Height).LastOrDefault()?.Url>

        <p>@ArtistProfile.Artist.Followers.Total.WithThousandsSeparator() @L["Followers"] @WithSeparatorPrefixIfNotEmpty(ArtistProfile.Artist.GetGenres())</p>

        <PrimaryIconButton Icon="play_arrow" OnClick=@(() => Spotify.PlayTrack(contextUri: ArtistProfile.Artist.Uri, trackUri: null)) />

    </ContextPageHeading>


    <SubsectionTitle Title=@L["PopularTracks"] />

    <DxDataGrid CssClass="datagrid px-2 py-4"
                DataRowCssClass="datagrid-row"
                DataNavigationMode=@DataGridNavigationMode.ShowAllDataRows
                ShowFilterRow=false
                SelectionMode=@DataGridSelectionMode.None
                AllowColumnDragDrop=false
                AllowSort=true
                Data=@ArtistProfile.TopTracks>

        <DxDataGridColumn Field=@nameof(FullTrack.Name) Caption=@L["Title"] Width="150px">
            <DisplayTemplate>
                <HighlightIfCurrentlyPlaying Uri=@((context as FullTrack)!.Uri)>
                    <ActionText Text=@((context as FullTrack)!.Name)
                                OnClick=@(() => PlayTopTracks((context as FullTrack)!.Uri)) />
                    @if ((context as FullTrack)!.Artists.Count > 1)
                    {
                        <span class="collab-with pl-1">@L["Feat"]</span>
                        @((MarkupString)((context as FullTrack)!.Artists.Where(a => !a.Uri.Equals(ArtistProfile.Artist.Uri)).GetArtists(link: true, localUrl: Spotify.ExploreArtistUrl)))
                    }
                </HighlightIfCurrentlyPlaying>
            </DisplayTemplate>
        </DxDataGridColumn>

        <DxDataGridColumn Field=@($"{nameof(FullTrack.Album)}.{nameof(SimpleAlbum.Name)}") Caption=@L["Album"] Width="150px">
            <DisplayTemplate>
                @((MarkupString)((context as FullTrack)!.Album.GetName(link: true, localUrl: Spotify.ExploreAlbumUrl)))
            </DisplayTemplate>
        </DxDataGridColumn>

        <DxDataGridColumn Field=@nameof(FullTrack.Popularity) Caption=@L["Popularity"] Width="70px" />

        <DxDataGridColumn Field=@nameof(FullTrack.DurationMs) Caption=@L["Length"] Width="50px">
            <DisplayTemplate>
                @((context as FullTrack)!.HumanReadableDuration())
            </DisplayTemplate>
        </DxDataGridColumn>

    </DxDataGrid>


    <SubsectionTitle Title=@L["Albums"] />

    <CardTileLayout>

        @foreach (var album in ArtistProfile.Albums)
        {
            <AlbumCard Album=@album />
        }

    </CardTileLayout>


    <SubsectionTitle Title=@L["FansAlsoLike"] />

    <CardTileLayout>

        @foreach (var artist in ArtistProfile.RelatedArtists)
        {
            <ArtistCard Artist=@artist />
        }

    </CardTileLayout>

</div>


@code
{
    [Parameter]
    public ArtistProfile ArtistProfile { get; set; } = null!;

    private async Task PlayTopTracks(string first)
    {
        var uris = new List<string> { first };
        uris.AddRange(ArtistProfile.TopTracks.Select(t => t.Uri).Where(u => !u.Equals(first)));

        await Spotify.PlayTracks(uris);
    }

    private string WithSeparatorPrefixIfNotEmpty(string? str) => string.IsNullOrEmpty(str) ? string.Empty : $"• {str}";
}