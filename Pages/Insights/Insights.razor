@page "/insights"
@page "/insights/{chosengraph}"


@using Caerostris.Shared.Data.TrackGrid 
@using Caerostris.Shared.Data.TrackGrid.Extensions 
@using Caerostris.Shared.Data.TrackGrid.Columns 

@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


@if (features is null)
{
    <CenteredLoadingIndicator @ref=@loadingIndicator LoadingWhat=@L["LoadingAnalytics"] ShowProgress />
}
else
{
    <div class="d-flex flex-column justify-content-start h-100 p-4 insights-content">

        @if (string.IsNullOrEmpty(ChosenGraph) || ChosenGraph.Equals(AddedAtRoute))
        {
            <AddedAtGraph Tracks=@tracks
                          @bind-SelectedTracksAndDescription=@selectedTracksAndDescription />
        }
        else if (ChosenGraph.Equals(AudioFeaturesRoute))
        {
            <AudioFeaturesGraph Tracks=@tracks
                                AudioFeatures=@features
                                @bind-SelectedTracksAndDescription=@selectedTracksAndDescription />
        }
        else if (ChosenGraph.Equals(TrackLengthRoute))
        {
            <TrackLengthGraph Tracks=@tracks
                              @bind-SelectedTracksAndDescription=@selectedTracksAndDescription />
        }

        @if (!(selectedTracksAndDescription is null))
        {
            <div class="d-flex flex-row justify-content-start insights-playlist-header">
                    
                <SubsectionTitle Title=@selectedTracksAndDescription.Item2 />

                <InlineActionIcon Icon="save" OnClick=SaveAsPlaylist />

            </div>

            <TrackGrid Class="mx-2 mt-2" 
                       Tracks=@selectedTracksAndDescription.Item1.Select(t => t.AsTrack()).ToList()
                       Fill>

                <TitleColumn />
                <ArtistsColumn />
                <AddedAtColumn />
                <DurationColumn />

            </TrackGrid>
        }

    </div>
}

@code
{
    [CascadingParameter]
    public ContextMenu? ContextMenu { get; set; }

    [Parameter]
    public string? ChosenGraph { get; set; }

    private const string AddedAtRoute = "added-at",
        AudioFeaturesRoute = "audio-features",
        TrackLengthRoute = "track-length";

    private IQueryable<SavedTrack>? tracks;
    private IQueryable<AudioFeatures>? features;

    Tuple<IEnumerable<SavedTrack>, string>? selectedTracksAndDescription;

    private CenteredLoadingIndicator loadingIndicator = default!;

    protected override async Task OnInitializedAsync()
    {
        if (await Spotify.IsAuthGranted())
        {
            tracks = (await Spotify.GetSavedTracks()).AsQueryable();
            features = (await Spotify.GetAudioFeaturesForSavedTracks()).AsQueryable();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Spotify.LibraryLoadingProgress += loadingIndicator.Update;
            Spotify.AnalyticsLoadingProgress += loadingIndicator.Update;
        }
    }

    protected override void OnParametersSet()
    {
        const string Href = nameof(NavMenuItem.Href),
            Match = nameof(NavMenuItem.Match),
            Icon = nameof(NavMenuItem.Icon),
            Text = nameof(NavMenuItem.Text);

        ContextMenu?.Set("insights", new List<Dictionary<String, object>>() // TODO: onparametesset gets called even if the component will never get rendered (e.g. because the user clicked away)
        {
            new Dictionary<String, object>()
            {
                { Href, string.Empty }, { Match, NavLinkMatch.All }, { Icon, "date_range" }, { Text, L["AddedAtGraphShortName"].Value }
            },
            new Dictionary<String, object>()
            {
                { Href, AudioFeaturesRoute }, { Icon, "graphic_eq" }, { Text, L["AudioFeaturesGraphShortName"].Value }
            },
            new Dictionary<String, object>()
            {
                { Href, TrackLengthRoute }, { Icon, "query_builder" }, { Text, L["TrackLengthGraphShortName"].Value }
            }
        });
    }

    private async Task SaveAsPlaylist()
    {
        if (!(selectedTracksAndDescription is null))
            await Spotify.CreatePlaylist(
                selectedTracksAndDescription.Item2,
                L["CreatedWithCaerostrisInsights"],
                selectedTracksAndDescription.Item1);
    }

    public void Dispose() =>
        ContextMenu?.Clear();
}
