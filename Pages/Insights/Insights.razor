@page "/insights"
@page "/insights/{chosengraph}"


@using Caerostris.Shared.Data.Graphs 
@using Caerostris.Shared.Data.TrackGrid 
@using Caerostris.Shared.Data.TrackGrid.Extensions 
@using Caerostris.Shared.Data.TrackGrid.Columns

@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


@if (features is null)
{
    <CenteredLoadingIndicator @ref=@loadingIndicator LoadingWhat=@($"{L["LoadingAnalytics"]} ({loadingStage}/{loadingStages})") ShowProgress />
}
else
{
    <div class="d-flex flex-column justify-content-start h-100 p-4 insights-content">

        @if (string.IsNullOrEmpty(ChosenGraph) || ChosenGraph == AddedAtRoute)
        {
            <AddedAtGraph Tracks=@tracks
                          @bind-SelectedTracksAndDescription=@selectedTracksAndDescription />
        }
        else if (ChosenGraph == AudioFeaturesRoute)
        {
            <AudioFeaturesGraph Tracks=@tracks
                                AudioFeatures=@features
                                @bind-SelectedTracksAndDescription=@selectedTracksAndDescription />
        }
        else if (ChosenGraph == TrackLengthRoute)
        {
            <TrackLengthGraph Tracks=@tracks
                              @bind-SelectedTracksAndDescription=@selectedTracksAndDescription />
        }

        @if (selectedTracksAndDescription is not null)
        {
            <div class="d-flex flex-row justify-content-start insights-playlist-header">
                    
                <SubsectionTitle Title=@selectedTracksAndDescription.Item2 />

                <InlineActionIcon Icon="save" OnClick=SaveAsPlaylist />

            </div>

            <TrackGrid Class="mx-2 mt-2" 
                       Tracks=@selectedTracksAndDescription.Item1.Select((t, i) => t.AsTrack(i)).ToList()
                       AllSaved
                       Fill>

                <TitleColumn />
                <ArtistsColumn />
                <AddedAtColumn />
                <DurationColumn />

            </TrackGrid>
        }

    </div>
}

@code
{
    [CascadingParameter]
    public ContextMenu? ContextMenu { get; set; }

    [Parameter]
    public string? ChosenGraph { get; set; }

    private const string AddedAtRoute = "added-at",
        AudioFeaturesRoute = "audio-features",
        TrackLengthRoute = "track-length";

    private IEnumerable<SavedTrack>? tracks;
    private IEnumerable<TrackAudioFeatures>? features;

    Tuple<IEnumerable<SavedTrack>, string>? selectedTracksAndDescription;

    private CenteredLoadingIndicator loadingIndicator = default!;
    private int loadingStage = 1;
    private const int loadingStages = 2;

    protected override async Task OnInitializedAsync()
    {
        tracks = await Spotify.Library.GetSavedTracks();
        features = await Spotify.Library.GetAudioFeaturesForSavedTracks();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Spotify.Library.LibraryLoadingProgress += loadingIndicator.Update;
            Spotify.Library.AnalyticsLoadingProgress += loadingIndicator.Update;
            Spotify.Library.AnalyticsLoadingProgress += AdvanceLoadingStage;
        }

        if (!(ContextMenu?.IsSet ?? true))
            SetContextMenu();
    }

    private void SetContextMenu()
    {
        const string Href = nameof(NavMenuItem.Href),
            Match = nameof(NavMenuItem.Match),
            Icon = nameof(NavMenuItem.Icon),
            Text = nameof(NavMenuItem.Text);

        ContextMenu?.Set("insights", new List<Dictionary<String, object>>()
        {
            new ()
            {
                { Href, string.Empty }, { Match, NavLinkMatch.All }, { Icon, "date_range" }, { Text, L["AddedAtGraphShortName"].Value }
            },
            new ()
            {
                { Href, AudioFeaturesRoute }, { Icon, "graphic_eq" }, { Text, L["AudioFeaturesGraphShortName"].Value }
            },
            new ()
            {
                { Href, TrackLengthRoute }, { Icon, "query_builder" }, { Text, L["TrackLengthGraphShortName"].Value }
            }
        });
    }

    private async Task SaveAsPlaylist()
    {
        if (selectedTracksAndDescription is not null)
            await Spotify.Library.CreatePlaylist(
                selectedTracksAndDescription.Item2,
                L["CreatedWithCaerostrisInsights"]!,
                selectedTracksAndDescription.Item1);
    }

    private void AdvanceLoadingStage(int current, int total)
    {
        loadingStage = 2;
        StateHasChanged();
    }

    public void Dispose()
    {
        Spotify.Library.LibraryLoadingProgress -= loadingIndicator.Update;
        Spotify.Library.AnalyticsLoadingProgress -= loadingIndicator.Update;
        Spotify.Library.AnalyticsLoadingProgress -= AdvanceLoadingStage;
        ContextMenu?.Clear();
    }
}
