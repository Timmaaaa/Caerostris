@page "/insights"

@using DevExpress.Blazor


@inject SpotifyService Spotify


@if (tracks is null)
{
    <CenteredLoadingIndicator @ref=@loadingIndicator LoadingWhat="analytics" ShowProgress />
}
else
{
    <div class="p-4">

        <p>Max tempo: @features.Max(t => t.Tempo)</p>

        <DxChart Data="@tracks">
            <DxChartTitle Text="Added at" />
            <DxChartCommonSeries AggregationMethod="@Enumerable.Sum"
                                 NameField="@((SavedTrack s) => s.AddedAt.Year)"
                                 ArgumentField="@((SavedTrack s) => s.AddedAt.Month)"
                                 ValueField="@((SavedTrack s) => 1)">
                <SeriesTemplate Context="settings">
                    <DxChartBarSeries Settings="@settings">
                        <DxChartSeriesLabel Visible="true"></DxChartSeriesLabel>
                    </DxChartBarSeries>
                </SeriesTemplate>
            </DxChartCommonSeries>
        </DxChart>

    </div>
}

@code
{
    private IQueryable<SavedTrack>? tracks;
    private IQueryable<AudioFeatures>? features;

    private CenteredLoadingIndicator loadingIndicator;

    protected async override Task OnInitializedAsync()
    {
        if (await Spotify.AuthGranted())
        {
            tracks = (await Spotify.GetSavedTracks()).AsQueryable();
            features = (await Spotify.GetAudioFeaturesForSavedTracks()).AsQueryable();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Spotify.LibraryLoadingProgress += loadingIndicator.Update;
            Spotify.AnalyticsLoadingProgress += loadingIndicator.Update;
        }
    }
}
