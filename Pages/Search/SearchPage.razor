@page "/search"


@using Caerostris.Services.Spotify.Web.ViewModels
@using Caerostris.Shared.Controls.Input 
@using System.Threading


@namespace Caerostris.Pages.Search


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


    <div class="d-flex flex-column justify-content-start h-100 pt-4 px-4">

        <ClearableTextInput Class="ml-3 p-1 search-query-form"
                            Icon="search"
                            Placeholder=@L["SearchInputPlaceholder"]
                            @bind-Input=@Query />

        <div class="d-flex flex-column justify-content-start overflow-auto pt-4 flex-grow-1">

            @if (results is null)
            {
                <CenteredInfo Text=@L["SearchResultsWillAppearHere"] />
            }
            else
            {
                <CardTileSections Sections=@results NoItemsMessage=@L["NoResults"] />
            }

        </div>

    </div>


@code
{
    private Sections? results;

    private bool hasQueryChanged = false;
    private Timer? searchTimer;
    private CancellationTokenSource? previousSearchTokenSource;

    private string query = "";
    private string Query
    {
        get => query;

        set
        {
            query = value;
            Spotify.SearchQuery = value;
            hasQueryChanged = true;
        }
    }

    protected override void OnInitialized()
    {
        searchTimer = new Timer( // TODO: ezt szebben
            callback: async _ =>
            {
                await InvokeAsync(async () =>
                {
                    if (hasQueryChanged)
                    {
                        hasQueryChanged = false;

                        previousSearchTokenSource?.Cancel();
                        previousSearchTokenSource = new CancellationTokenSource();

                        await GetResults(previousSearchTokenSource.Token);
                    }
                });
            },
            state: null,
            dueTime: 100,
            period: 200
        );

        Query = Spotify.SearchQuery;
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }

    private async Task GetResults(CancellationToken cancellationToken)
    {
        if (!string.IsNullOrWhiteSpace(query))
        {
            var searchResults = await Spotify.Search(query);
            if (!cancellationToken.IsCancellationRequested)
            {
                results = searchResults;
                StateHasChanged();
            }
        }
        else
        {
            results = null;
            StateHasChanged();
        }

    }
}
