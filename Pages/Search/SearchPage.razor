@page "/search"


@using Caerostris.Services.Spotify.Web.ViewModels
@using System.Threading


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


<div class="d-flex flex-column justify-content-start h-100 pr-4 pt-4 pl-4">

    <div class="ml-3 p-1 search-query-form">

        <label for="search-query"><i class="material-icons md-24">search</i></label>

        <input type="text" class="search-query" placeholder=@L["SearchInputPlaceholder"] id="search-query" autocomplete="off" @bind=@Query @bind:event="oninput" />

        <i class="material-icons md-24 clear-button clickable" @onclick=@(() => Query = "")>close</i>

    </div>

    <div class="d-flex flex-column justify-content-start overflow-auto mt-4" style="min-height: 50vh;">

        @if (results is null)
        {
            <CenteredInfo Text=@L["SearchResultsWillAppearHere"] />
        }
        else
        {
            @if (results.Tracks.Any())
            {
                <SubsectionTitle Title=@L["Tracks"] />

                <CardTileLayout>

                    @foreach (var track in results.Tracks)
                    {
                        <TrackCard Track=@track />
                    }

                </CardTileLayout>
            }

            @if (results.Artists.Any())
            {
                <SubsectionTitle Title=@L["Artists"] />

                <CardTileLayout>

                    @foreach (var artist in results.Artists)
                    {
                        <ArtistCard Artist=@artist />
                    }

                </CardTileLayout>
            }

            @if (results.Albums.Any())
            {
                <SubsectionTitle Title=@L["Albums"] />

                <CardTileLayout>

                    @foreach (var album in results.Albums)
                    {
                        <AlbumCard Album=@album />
                    }

                </CardTileLayout>
            }

            @if (results.Playlists.Any())
            {
                <SubsectionTitle Title=@L["Playlists"] />

                <CardTileLayout>

                    @foreach (var playlist in results.Playlists)
                    {
                        <PlaylistCard Playlist=@playlist />
                    }

                </CardTileLayout>
            }

            @if (!results.Albums.Any()
                 && !results.Artists.Any()
                 && !results.Playlists.Any()
                 && !results.Tracks.Any())
            {
                <CenteredInfo Text=@L["NoResults"] />
            }
        }

    </div>

</div>

@code
{
    private SearchResults? results;

    private bool hasQueryChanged = false;
    private Timer? searchTimer;
    private CancellationTokenSource? previousSearchTokenSource;

    private string query = "";
    private string Query
    {
        get => query;

        set
        {
            query = value;
            Spotify.SearchQuery = value;
            hasQueryChanged = true;
        }
    }

    protected override void OnInitialized()
    {
        searchTimer = new Timer(
            callback: async _ =>
            {
                await InvokeAsync(async () =>
                {
                    if (hasQueryChanged)
                    {
                        hasQueryChanged = false;

                        previousSearchTokenSource?.Cancel();
                        previousSearchTokenSource = new CancellationTokenSource();

                        await GetResults(previousSearchTokenSource.Token);
                    }
                });
            },
            state: null,
            dueTime: 100,
            period: 200
        );

        Query = Spotify.SearchQuery;
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }

    private async Task GetResults(CancellationToken cancellationToken)
    {
        if (!string.IsNullOrWhiteSpace(query))
        {
            var searchResults = await Spotify.Search(query);
            if (!cancellationToken.IsCancellationRequested)
            {
                results = searchResults;
                StateHasChanged();
            }
        }
        else
        {
            results = null;
            StateHasChanged();
        }

    }
}
