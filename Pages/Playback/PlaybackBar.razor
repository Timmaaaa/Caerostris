@using System.Globalization;
@using System.Text


@inject SpotifyService Spotify


<div class="mt-auto playbackbar">
    <div class="progress w-100" style="height: 4px;">
        <div class="progress-bar" style="width: @(progressPercent.ToString("F2", CultureInfo.InvariantCulture))%;"></div>
    </div>
    <div class="d-flex flex-row justify-content-between align-items-center px-3">

        <div class="d-flex flex-column justify-content-start track-metadata">
            <div><h4 class="track-title">@GetTrackTitle()</h4></div>
            <div><p class="track-artist">@GetArtist()</p></div>
        </div>

        <div class="d-flex flex-row align-items-center">

            <button @onclick="SkipToPreviousButtonClick" type="button" class="btn btn-outline-light border-0 px-2 m-2">
                <i class="material-icons md-24">skip_previous</i>
            </button>

            <button @onclick="PlayPauseButtonClick" type="button" class="btn btn-outline-light px-2 m-2">
                @if (IsPlaying())
                {
                    <i class="material-icons md-36">pause</i>
                }
                else
                {
                    <i class="material-icons md-36">play_arrow</i>
                }
            </button>

            <button @onclick="SkipToNextButtonClick" type="button" class="btn btn-outline-light border-0 px-2 m-2">
                <i class="material-icons md-24">skip_next</i>
            </button>

        </div>

        <div class="playback-extra-controls">

        </div>
    </div>
</div>


@code
{
    private PlaybackContext? playbackContext { get; set; }
    private double progressPercent = 0;

    protected async override Task OnInitializedAsync()
    {
        Spotify.PlaybackContextChanged += ContextChanged;

        Spotify.PlaybackDisplayUpdate += UpdateDisplay;


        if(await Spotify.AuthGranted())
            playbackContext = await Spotify.GetPlayback();
    }

    private async void ContextChanged(PlaybackContext context)
    {
        await InvokeAsync(() =>
        {
            playbackContext = context;
            StateHasChanged();
        });
    }

    private async void UpdateDisplay(int progressMs)
    {
        await InvokeAsync(() =>
        {
            if (playbackContext is null || playbackContext.Item is null)
                progressPercent = 0;
            else
                progressPercent = ((double)progressMs / (double)playbackContext.Item.DurationMs) * 100d;

            StateHasChanged();
        });
    }

    private async void PlayPauseButtonClick()
    {
        if (!(playbackContext is null))
            if (IsPlaying())
                await Spotify.Pause();
            else
                await Spotify.Play();
    }

    private async void SkipToNextButtonClick() =>
        await Spotify.Next();

    private async void SkipToPreviousButtonClick() =>
        await Spotify.Previous();

    // TODO: Migrate to SpotifyService as extensions
    private string GetTrackTitle()
    {
        if (playbackContext is null)
            return LoadingMessage();
        else if (playbackContext.Item is null)
            return UnavailableMessage("track");
        else
            return playbackContext.Item.Name;
    }

    private string GetArtist()
    {
        if (playbackContext is null)
            return LoadingMessage();
        else if (playbackContext.Item is null || playbackContext.Item.Artists is null)
            return string.Empty;
        else
            return FormatArtists(playbackContext.Item.Artists);
    }

    private string UnavailableMessage(string kind) => $"Current {kind} unavailable";

    private string LoadingMessage() => "Loading...";

    private string FormatArtists(List<SimpleArtist> artists)
    {
        const string delimiter = ", ";
        var builder = new StringBuilder();
        artists.ForEach(artist => { builder.Append($"{artist.Name}{delimiter}"); });
        return builder.ToString().Substring(0, builder.Length - delimiter.Length);
    }

    private bool IsPlaying() => playbackContext?.IsPlaying ?? false;
}
