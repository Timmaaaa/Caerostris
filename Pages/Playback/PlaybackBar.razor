@using Caerostris.Services.Spotify.Web;
@using SpotifyAPI.Web.Enums;


@inject SpotifyService Spotify


<div class="mt-auto playbackbar">

    <Progressbar 
        OnClick=@OnProgressbarClick
        Percent=@progressPercent />

    <div class="d-flex flex-row justify-content-between align-items-center px-3">

        <div class="d-flex flex-column justify-content-start track-metadata">
            <div><h4 class="track-title">@((MarkupString)playbackContext.GetTrackTitle(link: true))</h4></div>
            <div><p class="track-artist">@((MarkupString)playbackContext.GetArtists(links: true))</p></div>
        </div>

        <div class="d-flex flex-row align-items-center">

            <SecondaryIconButton OnClick=@OnSkipToPreviousButtonClick Icon="skip_previous" />

            <button @onclick="OnPlayPauseButtonClick" type="button" class="btn btn-outline-light px-2 m-2">
                <i class="material-icons md-36">@(playbackContext.IsPlayingOrNull() ? "pause" : "play_arrow")</i>
            </button>

            <SecondaryIconButton OnClick=@OnSkipToNextButtonClick Icon="skip_next" />

        </div>

        <div class="d-flex flex-row justify-content-end align-items-center playback-extra-controls">
            
            <SecondaryIndicatorIconButton 
                OnClick=@OnShuffleButtonClick 
                Icon="shuffle" 
                On=playbackContext.GetShuffleState() />

            <SecondaryIndicatorIconButton 
                OnClick=@OnRepeatButtonClick 
                Icon=@(playbackContext.GetRepeatState() == RepeatState.Track ? "repeat_one" : "repeat") 
                On=@(!(playbackContext.GetRepeatState() == RepeatState.Off)) />

            <SecondaryIndicatorIconButton 
                OnClick=@OnMuteButtonClick 
                Icon=@(playbackContext.GetVolumePercent() == 0 ? "volume_off" : "volume_up")
                On=@(playbackContext.GetVolumePercent() == 0) />

            <div class="w-25 pl-3">
                <Progressbar 
                    OnClick=@OnVolumebarClick
                    Percent=@playbackContext.GetVolumePercent() />
            </div>

        </div>

    </div>

</div>


@code
{
    private PlaybackContext? playbackContext { get; set; }
    private double progressPercent = 0;

    protected async override Task OnInitializedAsync()
    {
        Spotify.PlaybackContextChanged += ContextChanged;

        Spotify.PlaybackDisplayUpdate += UpdateDisplay;

        if(await Spotify.AuthGranted())
            playbackContext = await Spotify.GetPlayback();
    }

    private async void ContextChanged(PlaybackContext context)
    {
        await InvokeAsync(() =>
        {
            playbackContext = context;
            StateHasChanged();
        });
    }

    private async void UpdateDisplay(int progressMs)
    {
        await InvokeAsync(() =>
        {
            if(!playbackContext.HasValidItem())
                progressPercent = 0;
            else
                progressPercent = ((double)progressMs / (double)playbackContext.Item.DurationMs) * 100d;

            StateHasChanged();
        });
    }

    private async void OnPlayPauseButtonClick()
    {
        if(playbackContext.HasValidItem())
            if(playbackContext.IsPlaying)
                await Spotify.Pause();
            else
                await Spotify.Play();
    }

    private async Task OnSkipToNextButtonClick()
    {
        if(playbackContext.HasValidItem())
            await Spotify.Next();
    }

    private async Task OnSkipToPreviousButtonClick()
    {
        if (playbackContext.HasValidItem())
        {
            if (playbackContext.ProgressMs < 5 * 1000)
                await Spotify.Previous();
            else
                await Spotify.Seek(0);
        }
    }

    private async Task OnProgressbarClick(double progress)
    {
        if(playbackContext.HasValidItem())
            await Spotify.Seek(Convert.ToInt32(playbackContext.Item.DurationMs * progress));
    }

    private async Task OnMuteButtonClick()
    {
        if (!(playbackContext?.Device is null))
        {
            if (playbackContext.Device.VolumePercent > 0)
                await Spotify.SetVolume(0);
            else
                await Spotify.SetVolume(50);
        }
    }

    private async Task OnVolumebarClick(double progress) =>
        await Spotify.SetVolume(Convert.ToInt32(progress * 100));

    private async Task OnShuffleButtonClick() =>
        await Spotify.SetShuffle(!playbackContext.GetShuffleState());

    private async Task OnRepeatButtonClick() =>
        await Spotify.SetRepeat(
            (playbackContext.GetRepeatState() == RepeatState.Off)
                ? RepeatState.Context
                : (playbackContext.GetRepeatState() == RepeatState.Context)
                    ? RepeatState.Track
                    : RepeatState.Off);
}
