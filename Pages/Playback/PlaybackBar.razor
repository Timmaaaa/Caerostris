@using Caerostris.Services.Spotify.Web.SpotifyAPI.Web.Enums;


@inject SpotifyService Spotify


<div class="mt-auto d-flex flex-column playbackbar">

    <div class="d-flex flex-row justify-content-between align-items-center flex-fill">

        <div class="d-flex flex-row justify-content-start track-metadata">

            <img class="m-3 track-album-thumbnail" src=@PlaybackContext?.Item?.Album?.Images?.AtLeastOfHeight(50) />

            <div class="d-flex flex-column justify-content-center">

                <div class="d-flex flex-row justify-content-start align-items-center">

                    <h4 class="pb-1 pr-3 track-title">@((MarkupString)PlaybackContext.GetTrackTitle(link: true))</h4>

                    <SaveButton TrackId=@PlaybackContext?.Item?.Id />

                </div>
                
                <p class="track-artist">@((MarkupString)PlaybackContext.GetArtists(links: true, localUrl: Spotify.ExploreArtistUrl))</p>

            </div>

        </div>

        <div class="d-flex flex-column justify-content-start align-items-center flex-fill h-100">

            <div class="d-flex flex-row align-items-center pt-2">

                <SecondaryIconButton OnClick=@OnSkipToPreviousButtonClick Icon="skip_previous" />

                <PrimaryIconButton OnClick=@OnPlayPauseButtonClick Icon=@(PlaybackContext.IsPlayingOrNull() ? "pause" : "play_arrow") />

                <SecondaryIconButton OnClick=@OnSkipToNextButtonClick Icon="skip_next" />

            </div>

            <DurationDisplay OnClick=@OnProgressbarClick />

            </div>

        <div class="d-flex flex-row justify-content-end align-items-center playback-extra-controls">

            <SecondaryIndicatorIconButton OnClick=@OnShuffleButtonClick
                                            Icon="shuffle"
                                            On=PlaybackContext.GetShuffleState() />

            <SecondaryIndicatorIconButton OnClick=@OnRepeatButtonClick
                                            Icon=@(PlaybackContext.GetRepeatState() == RepeatState.Track ? "repeat_one" : "repeat")
                                            On="@(PlaybackContext.GetRepeatState() != RepeatState.Off)" />

            <SecondaryIndicatorIconButton OnClick=@OnMuteButtonClick
                                            Icon=@(PlaybackContext.GetVolumePercent() == 0 ? "volume_off" : "volume_up")
                                            On=@(PlaybackContext.GetVolumePercent() == 0) />

            <div class="w-25 mr-5">
                <Progressbar OnClick=@OnVolumebarClick
                                Percent=@PlaybackContext.GetVolumePercent() />
            </div>

        </div>

    </div>

</div>


@code
{
    [CascadingParameter]
    public PlaybackContext? PlaybackContext { get; set; }

    protected override void OnInitialized()
    {
        Spotify.PlaybackDisplayUpdate += UpdateDisplay;
    }

    private async void UpdateDisplay(int progressMs)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPlayPauseButtonClick()
    {
        if (PlaybackContext.HasValidItem())
            if (PlaybackContext.IsPlaying)
                await Spotify.Pause();
            else
                await Spotify.Play();
    }

    private async Task OnSkipToNextButtonClick()
    {
        if (PlaybackContext.HasValidItem())
            await Spotify.Next();
    }

    private async Task OnSkipToPreviousButtonClick()
    {
        if (PlaybackContext.HasValidItem())
        {
            if (PlaybackContext.ProgressMs < 5 * 1000)
                await Spotify.Previous();
            else
                await Spotify.Seek(0);
        }
    }

    private async Task OnProgressbarClick(double progress)
    {
        if (PlaybackContext.HasValidItem())
            await Spotify.Seek(Convert.ToInt32(PlaybackContext.Item.DurationMs * progress));
    }

    private async Task OnMuteButtonClick()
    {
        if (!(PlaybackContext?.Device is null))
        {
            if (PlaybackContext.Device.VolumePercent > 0)
                await Spotify.SetVolume(0);
            else
                await Spotify.SetVolume(50);
        }
    }

    private async Task OnVolumebarClick(double progress) =>
        await Spotify.SetVolume(Convert.ToInt32(progress * 100));

    private async Task OnShuffleButtonClick() =>
        await Spotify.SetShuffle(!PlaybackContext.GetShuffleState());

    private async Task OnRepeatButtonClick() =>
        await Spotify.SetRepeat(
            (PlaybackContext.GetRepeatState() == RepeatState.Off)
                ? RepeatState.Context
                : (PlaybackContext.GetRepeatState() == RepeatState.Context)
                    ? RepeatState.Track
                    : RepeatState.Off);
}
