@page "/"


@using Blazored.Modal.Services
@using Caerostris.Shared.Auth


@namespace Caerostris.Pages.Playback


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject IModalService ModalService
@inject SpotifyService Spotify


    <aside class="d-flex flex-column align-items-end m-3">

        <p class="mb-2 playback-status">@L["Playback", Username]</p>

        <ActionText Text=@L["Logout"] OnClick=@ShowLogoutModal />

    </aside>

    <div class="playback-cover-image-container">

        @if (coverImage is not null)
        {
            <a href=@albumUrl>

                <img class="playback-cover-image" src="@coverImage" style="height: 65vh; width: auto;" />

            </a>
        }

    </div>


@code
{
    private string? username;
    private string? coverImage;
    private string? albumUrl;

    private string Username => username ?? L["LoadingEllipsis"]!;

    protected override async Task OnInitializedAsync()
    {
        Spotify.Playback.PlaybackChanged += OnPlaybackChanged;
        Spotify.Auth.AuthStateChanged += OnAuthStateChanged;

        await FillUsername();
    }

    private async Task OnPlaybackChanged(CurrentlyPlayingContext playback)
    {
        await InvokeAsync(() =>
        {
            var image = playback?.ValidTrackItemOrNull()?.Album?.Images?.OrderBy((img) => -img.Height).FirstOrDefault();
            coverImage = image?.Url;
            albumUrl = $"{Spotify.Explore.ExploreAlbumUrl}{playback?.ValidTrackItemOrNull()?.Album?.Id}";

            StateHasChanged();
        });
    }

    private void OnAuthStateChanged(bool acquired)
    {
        if (acquired)
            InvokeAsync(() => FillUsername());
    }

    private async Task FillUsername()
    {
        if (await Spotify.Auth.IsUserLoggedIn())
        {
            username ??= await Spotify.User.GetUsername();
            StateHasChanged();
        }
    }

    private Task ShowLogoutModal()
    {
        ModalService.Show<LogoutModal>(title: L["LogoutModalTitle"]);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        Spotify.Playback.PlaybackChanged -= OnPlaybackChanged;
        Spotify.Auth.AuthStateChanged -= OnAuthStateChanged;
    }
}
