@page "/"


@inject SpotifyService Spotify


<div>
    <p class="p-3 playback-status">Playback state for: @(username ?? "Loading...")</p>
</div>
<div class="playback-cover-image-container">
    @if (!(coverImage is null))
    {
        <img class="playback-cover-image" src="@coverImage" style="height: 65vh; width: auto;"/>
    }
</div>


@code
{
    private string? username;
    private string? coverImage;

    protected async override Task OnInitializedAsync()
    {
        Spotify.PlaybackChanged += OnPlaybackChanged;

        Spotify.AuthStateChanged += (bool acquired) => { if (acquired) OnAuthAcquired(); };

        if (await Spotify.AuthGranted())
        {
            await FillUsername();
        }
    }

    private async Task OnPlaybackChanged(PlaybackContext playback)
    {
        await InvokeAsync(() =>
        {
            var image = playback?.Item?.Album?.Images?.OrderBy((img) => -img.Height).FirstOrDefault();
            coverImage = image?.Url;

            StateHasChanged();
        });
    }

    private async void OnAuthAcquired()
    {
        await InvokeAsync(async () =>
        {
            await FillUsername();
            StateHasChanged();
        });
    }

    private async Task FillUsername()
    {
        if (username is null)
            username = await Spotify.GetUsername();
    }
}
