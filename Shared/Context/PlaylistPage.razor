@namespace Caerostris.Shared.Context


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


    <div class="d-flex flex-column justify-content-start h-100 p-4">

        <ContextPageHeading Type=@L["Playlist"]
                            Uri=@CompletePlaylist.Playlist.Uri
                            LocalUrl=@Spotify.Explore.ExplorePlaylistUrl
                            ExternalUrls=@CompletePlaylist.Playlist.ExternalUrls
                            Title=@CompletePlaylist.Playlist.Name
                            Image=@CompletePlaylist.Playlist.Images>

            <By>
                @CompletePlaylist.Playlist.Owner?.DisplayName
            </By>

            <ChildContent>

                <p>
                    @((CompletePlaylist.Playlist.Public ?? false) ? L["Public"] : L["Private"])
                    • @CompletePlaylist.Playlist.Followers.Total.WithThousandsSeparator() @((CompletePlaylist.Playlist.Followers.Total == 1) ? L["Follower"] : L["Followers"])
                    • @CompletePlaylist.Tracks.Count() @((CompletePlaylist.Tracks.Count() == 1) ? L["Song"] : L["Songs"]), @CompletePlaylist.HumanReadableTotalLength()
                </p>

                @if (!string.IsNullOrEmpty(CompletePlaylist.Playlist.Description))
                {
                    <p class="pt-2">@((MarkupString)CompletePlaylist.Playlist.Description)</p>
                }

            </ChildContent>

        </ContextPageHeading>

        <TrackGrid Tracks=@CompletePlaylist.Tracks.Select((t, i) => t.AsTrack(i)).ToList()
                   ContextUri=@CompletePlaylist.Playlist.Uri
                   Search
                   Fill>

            <TitleColumn />
            <ArtistsColumn />
            <AddedAtColumn />
            <DurationColumn />

        </TrackGrid>

    </div>


@code
{
    [Parameter]
    public CompletePlaylist CompletePlaylist { get; set; } = default!;
}
