@namespace Caerostris.Shared.Controls.Progressbar


@inject IJSRuntime JSRuntime


    <div id=@Id
         class="w-100 d-flex flex-column justify-content-center progressbar-click-area @(OnClick is null ? "" : "clickable")"
         @onclick=@OnProgressbarClick>

        <div class="w-100 progressbar-background">

            <div class="position-relative progressbar-progress"
                 style="width: @FormattedPercent;">

                @if (!(OnClick is null))
                {
                    <div class="position-absolute progressbar-handle"></div>
                }

            </div>

        </div>


    </div>


@code
{
    [Parameter]
    public Func<double, Task>? OnClick { get; set; }

    [Parameter]
    public double Percent { get; set; }

    private const string JSHelper = "CaerostrisUtils";
    private readonly string Id = "progressbar-" + new Random().Next().ToString("x");

    private async void OnProgressbarClick(MouseEventArgs e)
    {
        /// I refrain from commenting on the current state of JSInterop, but I had to write JS functions to get some attributes of a DOM object
        double progressbarWidth = await JSRuntime.InvokeAsync<double>($"{JSHelper}.GetWidth", $"#{Id}");
        double progressbarPosition = await JSRuntime.InvokeAsync<double>($"{JSHelper}.GetClientPositionX", $"#{Id}");

        double position = e.ClientX - progressbarPosition;
        double progress = position / progressbarWidth;

        if (!(OnClick is null))
            await OnClick(progress);
    }

    private string FormattedPercent =>
        $"{Percent.ToString("F2", CultureInfo.InvariantCulture)}%";
}
