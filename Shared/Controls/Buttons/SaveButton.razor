@inject SpotifyService Spotify;


@if (!(TrackId is null))
{
    <InlineActionIcon Icon=@(Saved ? "favorite" : "favorite_border") OnClick=@OnClick/>
}


@code
{
    [Parameter]
    public string TrackId { get; set; } = null!;

    private bool? saved;
    private bool Saved => saved ?? false;

    protected override async Task OnInitializedAsync()
    {
        Spotify.AuthStateChanged += (acquired) => { if (acquired) OnAuthAcquired(); };

        await FillSaved();
    }

    protected override async Task OnParametersSetAsync()
    {
        await FillSaved();
    }

    private async void OnAuthAcquired()
    {
        await InvokeAsync(async () =>
        {
            await FillSaved();
            StateHasChanged();
        });
    }

    private async Task FillSaved()
    {
        if (!(TrackId is null) && await Spotify.IsAuthGranted())
            saved = await Spotify.IsTrackSaved(TrackId);
    }

    private async Task OnClick()
    {
        if (!(TrackId is null) && !(saved is null))
        {
            await Spotify.ToogleTrackSaved(TrackId);
            await FillSaved();
        }
    }
}
