@namespace Caerostris.Shared.Controls.Buttons


@inject SpotifyService Spotify


    @if (TrackId is not null)
    {
        <InlineActionIcon Icon=@(IsSaved ? "favorite" : "favorite_border") OnClick=@OnClick />
    }


@code
{
    [Parameter]
    public string? TrackId { get; set; }

    [Parameter]
    public string? LinkedFromId { get; set; }

    [Parameter]
    public bool? PrefetchedSavedState { get; set; }


    private bool? isSaved;

    private bool ignorePrefetched = false;


    protected override async Task OnInitializedAsync()
    {
        Spotify.AuthStateChanged += async (acquired) =>
        {
            if (acquired)
                await InvokeAsync(FillSavedIfFetchingAutonomously);
        };

        Spotify.SavedStateChanged += async (id, saved) =>
        {
            await InvokeAsync(() =>
            {
                if (id.Equals(TrackId) || id.Equals(LinkedFromId))
                {
                    ignorePrefetched = true;
                    isSaved = saved;
                    StateHasChanged();
                }
            });
        };

        await FillSavedIfFetchingAutonomously();
    }

    protected override async Task OnParametersSetAsync()
    {
        await FillSavedIfFetchingAutonomously();

        await base.OnParametersSetAsync();
    }

    private bool IsPrefetchedStateAvailable =>
        (!ignorePrefetched && (PrefetchedSavedState is not null));

    private bool ShouldFetchAutonomously =>
        (PrefetchedSavedState is null);

    private bool IsSaved =>
        (IsPrefetchedStateAvailable
            ? PrefetchedSavedState!.Value
            : (isSaved ?? false));

    private async Task FillSavedIfFetchingAutonomously()
    {
        if (ShouldFetchAutonomously && (TrackId is not null) && await Spotify.IsAuthGranted())
        {
            isSaved = await Spotify.IsTrackSaved(TrackId, LinkedFromId);
            StateHasChanged();
        }
    }

    private async Task OnClick()
    {
        if (TrackId is not null)
            await Spotify.ToogleTrackSaved(TrackId, LinkedFromId);
    }
}
