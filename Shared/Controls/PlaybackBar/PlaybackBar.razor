@namespace Caerostris.Shared.Controls.PlaybackBar


@using SpotifyAPI.Web
@using Caerostris.Shared.Controls.Links
@using Caerostris.Shared.Controls.Progressbar
@using Caerostris.Services.Spotify.Web.ViewModels


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


    <div class="mt-auto d-flex flex-column playbackbar">

        <div class="d-flex flex-row justify-content-between align-items-center flex-fill">

            <div class="d-flex flex-row justify-content-start track-metadata">

                <a href=@($"{Spotify.Explore.ExploreAlbumUrl}{PlaybackContext?.ValidTrackItemOrNull()?.Album?.Id}")>
                    <img class="m-3 track-album-thumbnail" src=@PlaybackContext?.ValidTrackItemOrNull()?.Album?.Images?.AtLeastOfHeight(50) />
                </a>

                <div class="d-flex flex-column justify-content-center">

                    <div class="d-flex">

                        <div class="mr-3 pb-1 track-title">

                            @if (PlaybackContext.ValidTrackItemOrNull() is FullTrack track)
                            {
                                <a href="/context">@track.Name</a>
                            }
                            else if (PlaybackContext is null)
                            {
                                @L["LoadingEllipsis"]
                            }
                            else if(PlaybackContext.Item is null)
                            {
                                @L["CurrentTrackUnavailable"]
                            }

                        </div>

                        <SaveButton TrackId=@PlaybackContext?.ValidTrackItemOrNull()?.Id />

                    </div>
                
                    <div class="track-artist"><ArtistLinkList Artists=@PlaybackContext?.ValidTrackItemOrNull()?.Artists /></div>

                </div>

            </div>

            <div class="d-flex flex-column justify-content-start align-items-center flex-fill h-100">

                <div class="d-flex flex-row align-items-center pt-2">

                    <SecondaryIconButton OnClick=@OnSkipToPreviousButtonClick Icon="skip_previous" />

                    <PrimaryIconButton OnClick=@OnPlayPauseButtonClick Icon=@(PlaybackContext.IsPlaying() ? "pause" : "play_arrow") />

                    <SecondaryIconButton OnClick=@OnSkipToNextButtonClick Icon="skip_next" />

                </div>

                <DurationDisplay OnClick=@OnProgressbarClick />

                </div>

            <div class="d-flex flex-row justify-content-end align-items-center playback-extra-controls">

                <SecondaryIndicatorIconButton OnClick=@OnShuffleButtonClick
                                              Icon="shuffle"
                                              On=PlaybackContext.GetShuffleState() />

                <SecondaryIndicatorIconButton OnClick=@OnRepeatButtonClick
                                              Icon=@(PlaybackContext.GetRepeatState() == RepeatState.Track.AsString() ? "repeat_one" : "repeat")
                                              On=@(PlaybackContext.GetRepeatState() != RepeatState.Off.AsString()) />

                <DeviceSelectionButton />

                <SecondaryIndicatorIconButton OnClick=@OnMuteButtonClick
                                              Icon=@(IsMuted ? "volume_off" : "volume_up")
                                              On=@IsMuted />

                <div class="w-25 mr-5">

                    <Progressbar OnClick=@OnVolumebarClick
                                 Percent=@PlaybackContext.GetVolumePercent() />

                </div>

            </div>

        </div>

    </div>


@code
{
    [CascadingParameter]
    public CurrentlyPlayingContext? PlaybackContext { get; set; }

    private int stashedVolumePercent = 50;

    protected override void OnInitialized()
    {
        Spotify.Playback.PlaybackDisplayUpdate += UpdateDisplay;
    }

    private async void UpdateDisplay(int progressMs)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPlayPauseButtonClick()
    {
        if (PlaybackContext.HasValidTrackItem())
            if (PlaybackContext.IsPlaying)
                await Spotify.Playback.Pause();
            else
                await Spotify.Playback.Play();
    }

    private async Task OnSkipToNextButtonClick()
    {
        if (PlaybackContext.HasValidTrackItem())
            await Spotify.Playback.Next();
    }

    private async Task OnSkipToPreviousButtonClick()
    {
        if (PlaybackContext.HasValidTrackItem())
            await Spotify.Playback.Previous();
    }

    private async Task OnProgressbarClick(double progress)
    {
        if (PlaybackContext.ValidTrackItemOrNull() is FullTrack track)
            await Spotify.Playback.Seek(Convert.ToInt32(track.DurationMs * progress));
    }

    private async Task OnMuteButtonClick()
    {
        if (PlaybackContext?.Device is not null)
        {
            var deviceVolumePercent = PlaybackContext.Device.VolumePercent ?? 100;
            if (!IsMuted)
            {
                stashedVolumePercent = deviceVolumePercent;
                await Spotify.Playback.SetVolume(0);
            }
            else
            {
                await Spotify.Playback.SetVolume(stashedVolumePercent);
            }
        }
    }

    private async Task OnVolumebarClick(double progress) =>
        await Spotify.Playback.SetVolume(Convert.ToInt32(progress * 100));

    private async Task OnShuffleButtonClick() =>
        await Spotify.Playback.SetShuffle(!PlaybackContext.GetShuffleState());

    private async Task OnRepeatButtonClick() =>
        await Spotify.Playback.SetRepeat(
            (PlaybackContext.GetRepeatState() == RepeatState.Off.AsString())
                ? RepeatState.Context
                : (PlaybackContext.GetRepeatState() == RepeatState.Context.AsString())
                    ? RepeatState.Track
                    : RepeatState.Off);

    private bool IsMuted =>
        PlaybackContext.GetVolumePercent() == 0;

    public void Dispose()
    {
        Spotify.Playback.PlaybackDisplayUpdate -= UpdateDisplay;
    }
}
