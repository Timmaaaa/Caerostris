@using Caerostris.Shared.Controls.Input
@using Caerostris.Shared.Data.TrackGrid.Columns
@using Caerostris.Shared.Data.TrackGrid.Interfaces
@using Caerostris.Shared.Data.TrackGrid.Parts
@using Caerostris.Shared.Data.TrackGrid.ViewModel
@using Caerostris.Services.Spotify.Web.ViewModels
@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.Components.Web.Virtualization


@namespace Caerostris.Shared.Data.TrackGrid


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


    <CascadingValue Value=@this IsFixed=@true>

        <PlayButtonColumn OnClick=@Play />

        <SaveButtonColumn PrefetchedSavedState=@prefetchedSavedState />

        @ChildContent

    </CascadingValue>

    <div class="@(Fill ? "flex-fill" : "") d-flex flex-column justify-content-start trackgrid-container @Class">

        <div class="trackgrid-head-container">

            <table class="w-100 trackgrid">

                <ColGroup VisibleColumns=@VisibleColumns />

                <thead>

                    @if (Search)
                    {
                        <tr class="search-row">

                            <td colspan=@VisibleColumns.Count>

                                <ClearableTextInput Class="ml-3 mb-2 w-25"
                                                    Icon="search"
                                                    Placeholder=@L["SearchInputPlaceholder"]
                                                    Discreet
                                                    @bind-Input=@SearchQuery />

                            </td>

                        </tr>
                    }

                    <tr class="title-row">

                        @foreach (var column in VisibleColumns)
                        {
                            <th class="column-title @((column.SortSettings.Direction != SortDirection.Unsorted) ? "sorted" : "")">

                                <ActionText Text=@column.Title.ToUpperInvariant()
                                            OnClickWithEventArgs=@((e) => OnColumnTitleClick(e, column)) />

                                @if (column.SortSettings.Direction != SortDirection.Unsorted)
                                {
                                    <i class="material-icons rem-inline">
                                        @(column.SortSettings.Direction switch
                                            {
                                                SortDirection.Ascending => "arrow_drop_up",
                                                SortDirection.Descending => "arrow_drop_down",
                                                _ => throw new ArgumentException($"No such {nameof(SortDirection)}.")
                                            })
                                    </i>

                                    @(VisibleColumns.Max(c => c.SortSettings.Rank) > 0
                                        ? column.SortSettings.Rank + 1
                                        : string.Empty)
                                }

                            </th>
                        }

                    </tr>

                    @if (Filter && !IsFilterQueryValid(SearchQuery))
                    {
                        <tr class="filter-row">

                            @foreach (var column in VisibleColumns)
                            {
                                <td>

                                    @if (column.IsFilterable)
                                    {
                                        <ClearableTextInput Class="py-1 w-100"
                                                            Icon="filter_list"
                                                            @bind-Input=@column.FilterQuery />
                                    }

                                </td>
                            }

                        </tr>

                    }

                </thead>

            </table>

        </div>

        <div class="trackgrid-body-container">

            <table class="w-100 trackgrid">

                <ColGroup VisibleColumns=@VisibleColumns />

                <tbody>

                    <Virtualize Items=@SortedFilteredTracks Context="track" OverscanCount="10">

                        <TrackRow Track=@track VisibleColumns=@VisibleColumns />

                    </Virtualize>

                </tbody>

            </table>

        </div>

    </div>


@code
{
    /// <summary>
    /// The tracks' saved status is only refetched when the reference changes.
    /// </summary>
    [Parameter]
    public ICollection<Track> Tracks { get; set; } = default!;

    [Parameter]
    public string? ContextUri { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Fill { get; set; } = false;

    [Parameter]
    public bool Filter { get; set; } = false;

    [Parameter]
    public bool Search { get; set; } = false;

    [Parameter]
    public bool AllSaved { get; set; } = false;

    [Parameter]
    public string? Class { get; set; }


    private IEnumerable<Track>? lastTracksReference;

    private List<IColumn> columns = new();

    private Dictionary<string, bool> prefetchedSavedState = new();

    private string SearchQuery { get; set; } = string.Empty;


    protected override async Task OnParametersSetAsync()
    {
        if (!ReferenceEquals(Tracks, lastTracksReference))
        {
            lastTracksReference = Tracks;

            foreach (var track in Tracks)
                prefetchedSavedState[track.Id] = AllSaved;

            if (!AllSaved)
                foreach (var idIsSavedPair in await Spotify.Library.AreTracksSaved(Tracks.Select(t => (t.Id, t.LinkedFromId))))
                    prefetchedSavedState[idIsSavedPair.Key] = idIsSavedPair.Value;
        }

        await base.OnParametersSetAsync();
    }

    public void AddColumn(IColumn column)
    {
        columns.Add(column);
        StateHasChanged();
    }

    public void ColumnStateChanged()
    {
        StateHasChanged();
    }

    private List<IColumn> VisibleColumns => columns.Where(c => c.IsVisible).ToList();

    private ICollection<Track> SortedFilteredTracks
    {
        get
        {
            var filtered = IsFilterQueryValid(SearchQuery)
                ? VisibleColumns
                    .Where(c => c.IsFilterable)
                    .Aggregate(new List<Track>(), (searchResults, c) =>
                        searchResults
                            .Concat(c.Filter(Tracks, SearchQuery))
                            .GroupBy(t => t.Id)
                            .Select(g => g.First()).ToList())
                : VisibleColumns
                    .Where(c => c.IsFilterable && IsFilterQueryValid(c.FilterQuery))
                    .Aggregate(Tracks, (tracks, c) => (Filter ? c.Filter(tracks, c.FilterQuery!).ToList() : tracks));

            var sortedFiltered = VisibleColumns
                .Where(c => c.SortSettings.Direction != SortDirection.Unsorted)
                .OrderBy(c => c.SortSettings.Rank)
                .Aggregate(filtered.OrderBy(t => 0), (tracks, c) => c.Sort(tracks))
                .ToList();

            return sortedFiltered;
        }
    }

    private void OnColumnTitleClick(MouseEventArgs e, IColumn column)
    {
        // Terminology: 'select': click on an unsorted column.
        // Click: select primary column or change sort direction of any column. When selecting, reset all other columns.
        if (!e.ShiftKey && !e.CtrlKey)
        {
            if (column.SortSettings.Direction == SortDirection.Unsorted)
                ResetSort();

            column.SortSettings.SetNextSortDirection();
        }

        // Shift + click: select primary or non-primary column or change sort direction of any column.
        else if (e.ShiftKey && !e.CtrlKey)
        {
            column.SortSettings.SetNextSortDirection(
                (column.SortSettings.Rank is null)
                    ? (columns.Select(c => c.SortSettings.Rank).Max(r => r ?? -1) + 1)
                    : (int?) null);
        }

        // Ctrl + click: reset current sort settings.
        else if (!e.ShiftKey && e.CtrlKey)
        {
            ResetSort();
        }

        StateHasChanged();
    }

    void ResetSort() =>
        columns.ForEach(c => c.SortSettings.Reset());

    private bool IsFilterQueryValid([NotNullWhen(true)] string? filterQuery) =>
        !string.IsNullOrWhiteSpace(filterQuery);

    private async Task Play(string trackUri)
    {
        if (ContextUri is null
            || columns.Any(c => c.SortSettings.Direction != SortDirection.Unsorted)
            || columns.Any(c => IsFilterQueryValid(c.FilterQuery)))
        {
            // A playback started in the Library will stop before reaching the end,
            // because the library context is not accessible through the API.
            // Shuffling is turned off to ensure that tracks will play in the selected order.
            await Spotify.Playback.SetShuffle(false);
            await Spotify.Playback.PlayTracks(
                SortedFilteredTracks
                    .SkipWhile(t => !t.Uri.Equals(trackUri))
                    .Select(t => t.Uri)
                    .Take(100));
        }
        else
        {
            await Spotify.Playback.PlayTrack(ContextUri, trackUri);
        }
    }
}
