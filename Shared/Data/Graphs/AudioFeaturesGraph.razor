@namespace Caerostris.Shared.Data.Graphs


@inherits TrackSelectionGraph


@inject IStringLocalizer<Text> L


    <DxChart Data=@data CssClass="audio-features-graph">

        <DxChartTitle Text=@L["AudioFeaturesGraphTitle"] />

        <DxChartValueAxis Name=@Bpm Pane=@Pane>
            <DxChartAxisTitle Text=@L["BeatsPerMinute"] />
        </DxChartValueAxis>

        <DxChartValueAxis Name=@Norm Position=@HorizontalEdge.Right Pane=@Pane>
            <DxChartAxisTitle Text=@L["NormalizedScore"] />
        </DxChartValueAxis>

        <DxChartLegend AllowToggleSeries=@true />

        <DxChartPane Name=@Pane />

        <DxChartLineSeries Name="Tempo"
                           ArgumentField=@(((SavedTrack, TrackAudioFeatures) s) => GetMonth(s))
                           AggregationMethod=@Enumerable.Average
                           ValueField=@(((SavedTrack, TrackAudioFeatures) s) => s.Item2.Tempo)
                           Axis=@Bpm>
            <DxChartSeriesPoint Visible=@false />
        </DxChartLineSeries>

        <DxChartLineSeries Name="Acousticness"
                           ArgumentField=@(((SavedTrack, TrackAudioFeatures) s) => GetMonth(s))
                           AggregationMethod=@Enumerable.Average
                           ValueField=@(((SavedTrack, TrackAudioFeatures) s) => s.Item2.Acousticness)
                           Axis=@Norm>
            <DxChartSeriesPoint Visible=@false />
        </DxChartLineSeries>

        <DxChartLineSeries Name="Valence"
                           ArgumentField=@(((SavedTrack, TrackAudioFeatures) s) => GetMonth(s))
                           AggregationMethod=@Enumerable.Average
                           ValueField=@(((SavedTrack, TrackAudioFeatures) s) => s.Item2.Valence)
                           Axis=@Norm>
            <DxChartSeriesPoint Visible=@false />
        </DxChartLineSeries>

        <DxChartLineSeries Name="Danceability"
                           ArgumentField=@(((SavedTrack, TrackAudioFeatures) s) => GetMonth(s))
                           AggregationMethod=@Enumerable.Average
                           ValueField=@(((SavedTrack, TrackAudioFeatures) s) => s.Item2.Danceability)
                           Axis=@Norm>
            <DxChartSeriesPoint Visible=@false />
        </DxChartLineSeries>

        <DxChartTooltip>

            <div class="p-2 d-flex flex-column align-items-center">

                <p>
                    <b>@L["Around", context.Point.SeriesName, GetFormattedFloat(ParseAsFloat(context.Point.Value))]</b>
                </p>

                <ActionText Text=@L["ShowTracksAroundThisValue"]
                            OnClick=@(() => OnValueSelected(context.Point.SeriesName.ToString(), ParseAsFloat(context.Point.Value))) />

            </div>

        </DxChartTooltip>

    </DxChart>


@code
{
    [Parameter]
    public IEnumerable<TrackAudioFeatures> AudioFeatures { get; set; } = default!;


    private IEnumerable<(SavedTrack, TrackAudioFeatures)>? data;

    private const string Pane = "pane", Bpm = "bpm", Norm = "norm";


    protected override void OnInitialized()
    {
        data = Tracks
            .Join(AudioFeatures, s => s.Track.Id, a => a.Id, (s, a) => (s, a))
            .OrderBy(s => s.Item1.AddedAt);
    }

    private string GetMonth((SavedTrack, TrackAudioFeatures) dataPoint) =>
        dataPoint.Item1.AddedAt.ToString("yyyy-MM", CultureInfo.InvariantCulture);

    private string GetFormattedFloat(float f) =>
        f.ToString("0.##");

    private float ParseAsFloat(object o) =>
        float.Parse(o.ToString());

    private async Task OnValueSelected(string property, float value)
    {
        float Prop((SavedTrack, TrackAudioFeatures) s) => property switch
        {
            "Tempo" => s.Item2.Tempo,
            "Acousticness" => s.Item2.Acousticness,
            "Valence" => s.Item2.Valence,
            "Danceability" => s.Item2.Danceability,
            _ => throw new ArgumentOutOfRangeException()
        };

        SelectedTracksAndDescription = new
        (
            data
                .Select(s => new { Item = s, Distance = Math.Abs(Prop(s) - value) })
                .OrderBy(a => a.Distance)
                .Take(25)
                .Select(a => a.Item.Item1),
            L["SongsWithPropertyAround", property.ToLowerInvariant(), GetFormattedFloat(value)]
        );

        await OnSelectedTracksAndDescriptionChanged();
    }
}