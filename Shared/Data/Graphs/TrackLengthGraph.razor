@namespace Caerostris.Shared.Data.Graphs


@inherits TrackSelectionGraph


@inject IStringLocalizer<Text> L


    <DxChart Data=@Tracks.OrderBy(s => s.Track.DurationMs)>

        <DxChartTitle Text=@L["TrackLengthGraphTitle"] />

        <DxChartCommonSeries NameField=@(_ => string.Empty)
                             ArgumentField=@((SavedTrack s) => GetMinInterval(s))
                             AggregationMethod=@Enumerable.Sum
                             ValueField=@(_ => 1)
                             SeriesType=@ChartSeriesType.Bar>

            <SeriesTemplate>
                <DxChartBarSeries Settings=@context>
                    <DxChartSeriesLabel Visible=@true />
                </DxChartBarSeries>
            </SeriesTemplate>

        </DxChartCommonSeries>

        <DxChartTooltip>

            <div class="p-2 d-flex flex-column align-items-center">

                <p><b>@context.Point.Argument</b></p>

                <p><b>@context.Point.Value</b> @L["NumSavedTracks"]</p>

                <ActionText Text=@L["ShowTracks"]
                            OnClick=@(() => OnIntervalSelected(context.Point.Argument.ToString()!)) />

            </div>

        </DxChartTooltip>

        <DxChartLegend Visible=@false />

    </DxChart>


@code
{
    private int DurationToFloorMinutes(SavedTrack s) =>
        TimeSpan.FromMilliseconds(s.Track.DurationMs).Minutes;

    private string GetMinInterval(SavedTrack s)
    {
        var min = DurationToFloorMinutes(s);
        return $"{min}-{min + 1} min";
    }

    private bool IsInMinInterval(SavedTrack s, int min, int max)
    {
        var minutes = DurationToFloorMinutes(s);
        return (min <= minutes && minutes < max);
    }

    private async Task OnIntervalSelected(string label)
    {
        var segments = label.Split(new[] { "-", " min" }, StringSplitOptions.RemoveEmptyEntries);
        int min = int.Parse(segments[0]), max = int.Parse(segments[1]);

        SelectedTracksAndDescription = new
        (
            Tracks.Where(s => IsInMinInterval(s, min, max)),
            L["SongsWithADurationOf", label]!
        );

        await OnSelectedTracksAndDescriptionChanged();
    }
}