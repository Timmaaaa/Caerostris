@using DevExpress.Blazor


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


<DxDataGrid CssClass="datagrid"
            DataRowCssClass="datagrid-row"
            DataNavigationMode=@DataGridNavigationMode.VirtualScrolling
            VerticalScrollBarMode=@ScrollBarMode.Visible
            VerticalScrollableHeight=@Height
            ShowFilterRow=@ShowFilterRow
            PageSize=30
            SelectionMode=@DataGridSelectionMode.None
            HtmlRowDecoration=@OnHtmlRowDecoration
            LayoutChanged=@OnLayoutChanged
            Data=@Tracks>

    <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Name)}") Caption=@L["Title"] Width="150px">
        <DisplayTemplate>
            <HighlightIfCurrentlyPlaying Uri=@((context as SavedTrack)!.Track.Uri)>
                <ActionText Text=@((context as SavedTrack)!.Track.Name)
                            OnClick=@(async () => await StartLibraryPlaybackAt((context as SavedTrack)!.Track.Uri)) />
            </HighlightIfCurrentlyPlaying>
        </DisplayTemplate>
    </DxDataGridColumn>

    <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Explicit)}") Caption=@L["Explicit"] Width="50px" Visible=@ShowExplicitColumn>
        <DisplayTemplate>
            @if ((context as SavedTrack)!.Track.Explicit)
            {
                <span class="explicit-mark">EXPLICIT</span>
            }
        </DisplayTemplate>
    </DxDataGridColumn>

    <DxDataGridColumn Caption=@L["Artist"] Width="150px" AllowSort=@DefaultBoolean.False>
        <DisplayTemplate>
            @((MarkupString)(context as SavedTrack)!.Track.Artists.GetArtists(link: true, localUrl: Spotify.ExploreArtistUrl))
        </DisplayTemplate>
    </DxDataGridColumn>

    <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Album)}.{nameof(SimpleAlbum.Name)}") Caption=@L["Album"] Width="100px">
        <DisplayTemplate>
            @((MarkupString)(context as SavedTrack)!.Track.Album.GetName(link: true, localUrl: Spotify.ExploreAlbumUrl))
        </DisplayTemplate>
    </DxDataGridColumn>

    <DxDataGridColumn Field=@nameof(SavedTrack.AddedAt) Caption=@L["AddedAt"] Width="100px" Visible=@ShowAddedAtColumn>
        <DisplayTemplate>
            @((context as SavedTrack)!.HumanReadableAddedAt())
        </DisplayTemplate>
    </DxDataGridColumn>

    <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.DurationMs)}") Caption=@L["Length"] Width="50px">
        <DisplayTemplate>
            @((context as SavedTrack)!.Track.HumanReadableDuration())
        </DisplayTemplate>
    </DxDataGridColumn>

    <DxDataGridColumn Field=@($"{nameof(SavedTrack.Track)}.{nameof(FullTrack.Popularity)}") Caption=@L["Popularity"] Width="50px" Visible=@ShowPopularityColumn />

</DxDataGrid>

@code
{
    [Parameter]
    public IEnumerable<SavedTrack> Tracks { get; set; } = null!;

    [Parameter]
    public int Height { get; set; } = 550;

    [Parameter]
    public bool ShowFilterRow { get; set; } = false;

    [Parameter]
    public bool ShowExplicitColumn { get; set; } = false;

    [Parameter]
    public bool ShowAddedAtColumn { get; set; } = false;

    [Parameter]
    public bool ShowPopularityColumn { get; set; } = false;


    private List<string> visibleUris = new List<string>();


    private void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<SavedTrack> e)
    {
        if (e.VisibleIndex == 0)
            visibleUris.Clear();

        visibleUris.Add(e.DataItem.Track.Uri);
    }

    private void OnLayoutChanged(IDataGridLayout _) =>
        visibleUris.Clear();

    private async Task StartLibraryPlaybackAt(string Uri)
    {
        if (!visibleUris.Contains(Uri))
            await Spotify.PlayTrack(null, Uri);
        else
            await Spotify.PlayTracks(visibleUris.GetRange(visibleUris.IndexOf(Uri), visibleUris.Count - visibleUris.IndexOf(Uri)));
    }

}
