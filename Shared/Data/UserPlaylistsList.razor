@using Caerostris.Shared.Controls.Links


@namespace Caerostris.Shared.Data


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify


    @if (playlists is not null)
    {
        <aside class="d-flex flex-column flex-fill my-2 pl-4 pr-3 w-100 user-playlists-container">

            <h4 class="user-playlists-list-title">@L["Playlists"]</h4>

            <ol class="flex-fill overflow-auto m-0 p-0 user-playlists-list">

                @foreach (var playlist in playlists)
                {
                    <li>
                
                        <ContextLink Title=@playlist.Name ContextId=@playlist.Id ContextExternalUrls=playlist.ExternalUrls LocalUrl=@Spotify.Explore.ExplorePlaylistUrl />
                    
                    </li>
                }

            </ol>

        </aside>
    }


@code
{
    private IEnumerable<SimplePlaylist>? playlists;

    protected override async Task OnInitializedAsync()
    {
        Spotify.Auth.AuthStateChanged += OnAuthAcquired;
        Spotify.Library.UserPlaylistsChanged += OnUserPlaylistsChanged;

        if (await Spotify.Auth.IsUserLoggedIn())
            await FillPlaylists();
    }

    private async void OnAuthAcquired(bool acquired)
    {
        if (acquired)
            await InvokeAsync(() => FillPlaylists());
    }

    private async Task OnUserPlaylistsChanged()
    {
        await InvokeAsync(() => FillPlaylists(forceReload: true));
    }

    private async Task FillPlaylists(bool forceReload = false)
    {
        if (forceReload || playlists is null)
        {
            playlists = await Spotify.Library.GetUserPlaylists();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Spotify.Auth.AuthStateChanged -= OnAuthAcquired;
        Spotify.Library.UserPlaylistsChanged -= OnUserPlaylistsChanged;
    }
}
