@using Blazored.Modal
@using Blazored.Modal.Services


@namespace Caerostris.Shared.Auth


@implements IDisposable


@inject IStringLocalizer<Text> L
@inject SpotifyService Spotify
@inject NavigationManager NavManager
@inject IModalService ModalService


@code
{
    /// <summary>
    /// The AuthDaemon component is responsible for orchestrating the authorization process.
    /// </summary>

    protected override async Task OnInitializedAsync()
    {
        Spotify.Auth.AuthStateChanged += OnAuthStateChanged;

        // The event won't fire if the user hasn't connected their account yet.
        // Check for auth state right away.
        if (!(await Spotify.Auth.IsUserLoggedIn()))
            OnAuthStateChanged(false);
    }

    private async void OnAuthStateChanged(bool state)
    {
        await InvokeAsync(() => { if (!state && !NavManager.Uri.Contains(Spotify.Auth.RelativeCallbackUrl)) ShowModal(); });
    }

    private void ShowModal() =>
        ModalService.Show<AuthModal>(title: L["AuthModalTitle"], new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        });

    public void Dispose()
    {
        Spotify.Auth.AuthStateChanged -= OnAuthStateChanged;
    }
}
